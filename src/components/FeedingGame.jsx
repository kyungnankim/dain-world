// src/components/FeedingGame.jsx
import React, { useState, useEffect } from "react";

import dainImage from "../assets/Î∂ÑÏú†Îã§Ïù∏.png";
import crawlingDainImage from "../assets/ÏóâÍ∏àÎã§Ïù∏.png";
import bottleImage from "../assets/Ï†ñÎ≥ë.png";
import formulaImage from "../assets/Î∂ÑÏú†ÌÜµ.png";

// 2Îã®Í≥Ñ Ïù¥Ïú†Ïãù Ïù¥ÎØ∏ÏßÄÎì§
import spinachImage from "../assets/ÏãúÍ∏àÏπò.png";
import pumpkinImage from "../assets/Îã®Ìò∏Î∞ï.png";
import beefImage from "../assets/ÏÜåÍ≥†Í∏∞.png";
import riceImage from "../assets/Í∞êÏûê.png";
import sesameImage from "../assets/Îã≠Í≥†Í∏∞.png";
import riceCakeImage from "../assets/ÏñëÌåå.png";

// Í∞Å Îã®Í≥ÑÎ≥Ñ ÏÑ§Ï†ï
const STAGE_CONFIG = {
  1: {
    maxScore: 6,
    foods: [{ image: bottleImage, name: "Ï†ñÎ≥ë" }],
    characterImage: dainImage,
    title: "üçº Î∂ÑÏú† Î®πÍ∏∞",
    instruction: "ÌôîÎ©¥ÏùÑ ÌÅ¥Î¶≠Ìï¥ÏÑú Îã§Ïù∏Ïù¥ÏóêÍ≤å Ïö∞Ïú†Î•º Î®πÏó¨Ï£ºÏÑ∏Ïöî!",
    completionMessage: "üéâ Îã§Ïù∏Ïù¥Îäî 6Í∞úÏõîÍ∞Ñ Ïö∞Ïú†Î•º Î®πÍ≥† Î¨¥Îü≠Î¨¥Îü≠ ÏûêÎûêÏñ¥Ïöî!",
  },
  2: {
    maxScore: 12, // 6Í∞ÄÏßÄ ÏùåÏãù * 2Î≤àÏî©
    foods: [
      { image: spinachImage, name: "ÏãúÍ∏àÏπò" },
      { image: pumpkinImage, name: "Îã®Ìò∏Î∞ï" },
      { image: beefImage, name: "ÏÜåÍ≥†Í∏∞" },
      { image: riceImage, name: "Í∞êÏûê" },
      { image: sesameImage, name: "Îã≠Í≥†Í∏∞" },
      { image: riceCakeImage, name: "ÏñëÌåå" },
    ],
    characterImage: crawlingDainImage,
    title: "ü•Ñ Ïù¥Ïú†Ïãù Î®πÍ∏∞",
    instruction: "Îã§ÏñëÌïú Ïù¥Ïú†ÏãùÏùÑ Î®πÏó¨ÏÑú Îã§Ïù∏Ïù¥Î•º ÌÇ§ÏõåÏ£ºÏÑ∏Ïöî!",
    completionMessage:
      "üéä Îã§Ïù∏Ïù¥Í∞Ä Ïù¥Ïú†ÏãùÏùÑ Î®πÍ≥† Î¨¥Îü≠Î¨¥Îü≠ ÏûêÎùº Ï≤´ ÎèåÏùÑ ÎßûÏù¥ÌñàÏñ¥Ïöî!",
  },
};

function FeedingGame({ onBack }) {
  const [stage, setStage] = useState(1);
  const [score, setScore] = useState(0);
  const [isMoving, setIsMoving] = useState(false);
  const [showTransition, setShowTransition] = useState(false);
  const [currentFoodIndex, setCurrentFoodIndex] = useState(0);
  const [gameCompleted, setGameCompleted] = useState(false);
  const [screenSize, setScreenSize] = useState({ width: 1024, height: 768 });

  const [dainPosition, setDainPosition] = useState({ top: "50%", left: "50%" });
  const [foodPosition, setFoodPosition] = useState({ top: "70%", left: "50%" });
  const [foodOpacity, setFoodOpacity] = useState(1);

  useEffect(() => {
    const updateScreenSize = () => {
      if (typeof window !== "undefined") {
        setScreenSize({
          width: window.innerWidth,
          height: window.innerHeight,
        });
      }
    };

    updateScreenSize();
    window.addEventListener("resize", updateScreenSize);
    return () => window.removeEventListener("resize", updateScreenSize);
  }, []);

  const currentStage = STAGE_CONFIG[stage] || STAGE_CONFIG[1];

  const getDainSize = () => {
    const isMobile = screenSize.width <= 768;
    const isTablet = screenSize.width > 768 && screenSize.width <= 1024;

    let baseSize, growthPerFood, maxSize;

    if (isMobile) {
      baseSize = 120;
      growthPerFood = 12;
      maxSize = 220;
    } else if (isTablet) {
      baseSize = 150;
      growthPerFood = 16;
      maxSize = 280;
    } else {
      baseSize = 180;
      growthPerFood = 20;
      maxSize = 350;
    }

    const currentSize = baseSize + score * growthPerFood;
    return Math.min(currentSize, maxSize);
  };

  const getCurrentFood = () => {
    if (stage === 1) {
      return currentStage.foods[0];
    } else {
      return currentStage.foods[currentFoodIndex % currentStage.foods.length];
    }
  };

  // ÌôîÎ©¥ ÎÇ¥ÏóêÏÑúÎßå ÏùåÏãùÏù¥ ÏõÄÏßÅÏù¥ÎèÑÎ°ù ÏàòÏ†ïÎêú Ìï®Ïàò
  const moveFood = () => {
    const isMobile = screenSize.width <= 768;

    // ÌôîÎ©¥ Í≤ΩÍ≥Ñ ÏÑ§Ï†ï - Îçî Î≥¥ÏàòÏ†ÅÏúºÎ°ú ÏÑ§Ï†ï
    const topPadding = isMobile ? 80 : 90; // ÏÉÅÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏïÑÎûò
    const bottomPadding = isMobile ? 160 : 180; // ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò + ÏïàÎÇ¥Î¨∏ ÏúÑ
    const sidePadding = isMobile ? 30 : 50; // Ï¢åÏö∞ Ïó¨Î∞±

    // Ïã§Ï†ú Í≤åÏûÑ ÏòÅÏó≠ ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
    const gameAreaWidth = screenSize.width - sidePadding * 2;
    const gameAreaHeight = screenSize.height - topPadding - bottomPadding;

    // ÏùåÏãù ÌÅ¨Í∏∞ Í≥†Î†§ (90px)
    const foodSize = 90;
    const maxLeft = gameAreaWidth - foodSize;
    const maxTop = gameAreaHeight - foodSize;

    // ÏïàÏ†ÑÌïú Î≤îÏúÑ ÎÇ¥ÏóêÏÑú ÎûúÎç§ ÏúÑÏπò Í≥ÑÏÇ∞
    const safeLeft = Math.max(0, Math.random() * maxLeft);
    const safeTop = Math.max(0, Math.random() * maxTop);

    // ÏµúÏ¢Ö ÏúÑÏπò ÏÑ§Ï†ï (Ìå®Îî© Ï∂îÍ∞Ä)
    const finalLeft = sidePadding + safeLeft;
    const finalTop = topPadding + safeTop;

    setFoodPosition({
      top: `${finalTop}px`,
      left: `${finalLeft}px`,
    });
    setFoodOpacity(1);
  };

  // Îã§Ïù∏Ïù¥Î•º ÌôîÎ©¥ Í∞ÄÏö¥Îç∞Î°ú Ï¥àÍ∏∞ ÏúÑÏπò ÏÑ§Ï†ï
  const initializeDainPosition = () => {
    const isMobile = screenSize.width <= 768;
    const topPadding = isMobile ? 80 : 90;
    const bottomPadding = isMobile ? 160 : 180;

    // ÌôîÎ©¥ Ï§ëÏïôÏóê Î∞∞Ïπò
    const centerX = screenSize.width / 2;
    const centerY =
      topPadding + (screenSize.height - topPadding - bottomPadding) / 2;

    setDainPosition({
      top: `${centerY}px`,
      left: `${centerX}px`,
    });
  };

  const restartGame = () => {
    setStage(1);
    setScore(0);
    setCurrentFoodIndex(0);
    setGameCompleted(false);
    setShowTransition(false);
    setIsMoving(false);

    // Îã§Ïù∏Ïù¥ ÏúÑÏπò Ï¥àÍ∏∞Ìôî ÌõÑ ÏùåÏãù ÏúÑÏπò ÏÑ§Ï†ï
    setTimeout(() => {
      initializeDainPosition();
      moveFood();
    }, 100);
  };

  const goToNextStage = () => {
    setShowTransition(true);

    setTimeout(() => {
      setStage(stage + 1);
      setScore(0);
      setCurrentFoodIndex(0);
      initializeDainPosition();
      moveFood();
      setShowTransition(false);
    }, 3000);
  };

  const handleScreenClick = () => {
    if (isMoving || showTransition || gameCompleted) return;

    setIsMoving(true);

    // Îã§Ïù∏Ïù¥Í∞Ä ÏùåÏãù ÏúÑÏπòÎ°ú Ïù¥Îèô (Ï§ëÏïô Ï†ïÎ†¨ÏùÑ ÏúÑÌïú Ïò§ÌîÑÏÖã)
    const dainSize = getDainSize();
    const foodOffset = 45; // ÏùåÏãù ÌÅ¨Í∏∞Ïùò Ï†àÎ∞ò (90px/2)
    const dainOffset = dainSize / 2;

    const newDainPosition = {
      top: `calc(${foodPosition.top} + ${foodOffset - dainOffset}px)`,
      left: `calc(${foodPosition.left} + ${foodOffset - dainOffset}px)`,
    };

    setDainPosition(newDainPosition);

    setTimeout(() => {
      const newScore = score + 1;
      setScore(newScore);
      setFoodOpacity(0);

      setTimeout(() => {
        if (stage === 2) {
          setCurrentFoodIndex(currentFoodIndex + 1);
        }

        setTimeout(() => {
          if (newScore >= currentStage.maxScore) {
            if (stage < 2) {
              goToNextStage();
            } else {
              setGameCompleted(true);
            }
          } else {
            moveFood();
          }
          setIsMoving(false);
        }, 200);
      }, 300);
    }, 600);
  };

  // ÌôîÎ©¥ ÌÅ¨Í∏∞ Î≥ÄÍ≤ΩÏãú ÏúÑÏπò Ïû¨Ï°∞Ï†ï
  useEffect(() => {
    if (screenSize.width > 0 && screenSize.height > 0) {
      initializeDainPosition();
      if (!showTransition) {
        moveFood();
      }
    }
  }, [screenSize.width, screenSize.height]);

  // Ïä§ÌÖåÏù¥ÏßÄ Î≥ÄÍ≤ΩÏãú ÏúÑÏπò Ïû¨ÏÑ§Ï†ï
  useEffect(() => {
    if (!showTransition && screenSize.width > 0) {
      setTimeout(() => {
        initializeDainPosition();
        moveFood();
      }, 100);
    }
  }, [stage]);

  if (!currentStage) {
    return <div className="feeding-game-loading">Loading...</div>;
  }

  const currentFood = getCurrentFood();
  const dainSize = getDainSize();

  return (
    <div
      className="feeding-game-container"
      onClick={handleScreenClick}
      style={{
        width: "100vw",
        height: "100vh",
        overflow: "hidden", // Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
        position: "relative",
      }}
    >
      <div className="feeding-game-stage-indicator">
        {currentStage.title} - {score}/{currentStage.maxScore}
      </div>

      <div className="feeding-game-scoreboard">
        <img
          src={formulaImage}
          alt="Î∂ÑÏú†ÌÜµ"
          className="feeding-game-scoreboard-icon"
        />
        <span className="feeding-game-scoreboard-text">ÎÉ†ÎÉ†: {score}Î≤à</span>
      </div>

      <img
        src={currentStage.characterImage}
        alt="Îã§Ïù∏Ïù¥"
        className="feeding-game-dain"
        style={{
          position: "absolute",
          top: dainPosition.top,
          left: dainPosition.left,
          width: `${dainSize}px`,
          height: `${dainSize}px`,
          transform: "translate(-50%, -50%)", // Ï§ëÏïô Ï†ïÎ†¨
          transition: isMoving
            ? "top 0.5s ease-in-out, left 0.5s ease-in-out, width 0.3s ease, height 0.3s ease"
            : "width 0.3s ease, height 0.3s ease",
          zIndex: 2,
          userSelect: "none",
        }}
      />

      {!showTransition && !gameCompleted && (
        <img
          src={currentFood.image}
          alt={currentFood.name}
          className="feeding-game-food"
          style={{
            position: "absolute",
            top: foodPosition.top,
            left: foodPosition.left,
            width: "90px",
            height: "90px",
            opacity: foodOpacity,
            transition: "opacity 0.5s",
            zIndex: 1,
            userSelect: "none",
          }}
        />
      )}

      {!showTransition && !gameCompleted && (
        <div className="feeding-game-instruction">
          {currentStage.instruction}
          <br />
          <small>ÌòÑÏû¨ ÏùåÏãù: {currentFood.name}</small>
        </div>
      )}

      {showTransition && (
        <div className="feeding-game-modal">
          <div className="feeding-game-modal-emoji">
            {stage < 2 ? "üéâ" : "üéä"}
          </div>
          <div className="feeding-game-modal-title">
            {currentStage.completionMessage}
          </div>
          {stage < 2 && (
            <div className="feeding-game-modal-subtitle">
              Ïû†Ïãú ÌõÑ {STAGE_CONFIG[stage + 1].title} Îã®Í≥ÑÎ°ú ÎÑòÏñ¥Í∞ëÎãàÎã§...
            </div>
          )}
          {stage >= 2 && (
            <div className="feeding-game-modal-subtitle">
              Í≤åÏûÑÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! Î©îÏù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ëÎãàÎã§...
            </div>
          )}
        </div>
      )}

      {gameCompleted && (
        <div className="feeding-game-modal">
          <div className="feeding-game-modal-emoji">üéä</div>
          <div className="feeding-game-modal-title">Ï∂ïÌïòÌï©ÎãàÎã§!</div>
          <div className="feeding-game-modal-description">
            Îã§Ïù∏Ïù¥Í∞Ä Î™®Îì† ÏùåÏãùÏùÑ Î®πÍ≥† Í±¥Í∞ïÌïòÍ≤å ÏûêÎûêÏñ¥Ïöî!
          </div>
          <div className="feeding-game-completed-buttons">
            <button
              className="fortune-btn feeding-game-restart-button"
              onClick={restartGame}
            >
              Îã§ÏãúÌïòÍ∏∞
            </button>
            <button
              className="fortune-btn feeding-game-home-button"
              onClick={onBack}
            >
              Î©îÏù∏ÏúºÎ°ú
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default FeedingGame;
